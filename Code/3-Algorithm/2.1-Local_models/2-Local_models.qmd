---
title: "2-Local_models"
format: html
editor: visual
---

## Create local models

This code uses the grid data frames obtained from the previous script to create the local models, one for each station. Four models are created for each station, and the one with the lowest AIC value is kept. These models are: a model with only the geopotential variables as predictors, a model with the geopotential variables and a lag term of them, a model with the geopotential variables and a second order polynomial term, and a model with the geopotential variables, the lag terms, and the second order polynomials.

## Set records and refine station names

This code cell sets the records using maximum temperature temperatures and refines some of the names from the station data frame.

```{r message = FALSE, warning = FALSE}

# Clear workspace
rm(list = ls())

# Set data directory
data_dir <- "../../../Data"
if(!dir.exists(data_dir)) stop("data_dir not found")

# Read list of observatories of interest. Based on previous work.
stations <- read.csv(file.path(data_dir,"geo_peninsula_zones.csv"))
idx <- which(!is.na(stations$Zona))
stations <- stations[idx,]
stations$point <- sapply(1:nrow(stations),
                         function(x){
                           aux <- as.character(round(stations$LON[x]))
                           if(grepl("^-",aux)){
                             aux <- paste0(substr(aux, 2, nchar(aux)),"W")
                           } else aux <- paste0(aux,"E")
                           })
stations$point <- paste0(round(stations$LAT),"N.",
                         stations$point)

# Corner points
cpoints <- c("45N.10W","45N.5E","35N.10W","35N.5E")

# Read record indicators matrix
itx.mat <- read.csv(file.path(data_dir,"record.data","record.matrix.csv"))
itx.mat$Date <- as.Date(itx.mat$Date)

# Read grid data
gall <- cbind(read.csv(file.path(data_dir,"grid_data","g300_grid.csv")),
              read.csv(file.path(data_dir,"grid_data","g500_grid.csv")),
              read.csv(file.path(data_dir,"grid_data","g700_grid.csv")))

```

## Create local models and save them

In the code cell below we create the four local models for each station and save the best one.

```{r}

# Define output directory to save the models
outdir <- "../../../Results/local.models"

# Start loop to construct the local models
if(!dir.exists(outdir)){
  
  # Load libraries
  if(!is.element("dplyr", row.names(installed.packages()))) install.packages("dplyr")
  library(dplyr)
  if(!is.element("MASS", row.names(installed.packages()))) install.packages("MASS")
  library(MASS)
  if(!is.element("pROC", row.names(installed.packages()))) install.packages("pROC")
  library(pROC)
  
  # Create output directory to save the models
  dir.create(outdir, recursive = T)
  
  # Abbreviations
  stations$STANAME[10] <- "FABRA OBSERVATORY                       "
  stations$STANAME[25] <- "BCN/AEROPUERTO                          "
  stations$abb <- substr(stations$STANAME,1,6)
  
  # Create matrix to save AUC values
  AUC.df <- data.frame(STAID = stations$STAID,
                       STAAB = stations$abb,
                       AUC = vector("numeric",nrow(stations)))
  # Variable names
  eralevels <- paste0("g",c("300","500","700"))
  
  # Set train-test sets
  idx.years <- format(itx.mat$Date, "%Y")
  tab.years <- table(idx.years)
  length(tab.years)
  idx.train <- which(!is.na(match(idx.years,names(tab.years)[1:51])))
  #idx.test <- which(is.na(match(idx.years,names(tab.years)[1:51])))
  
  for(ss in 1:nrow(stations)){
    
    tic <- Sys.time()
    print(paste0("Station: ",ss,"/",nrow(stations)))
  
    # Create data.frame
    bin_df <- data.frame(Ix = itx.mat[[paste0("X",stations$STAID[ss])]])
    
    # Include variables of interest
    fivep <- c(stations$point[ss], cpoints)
    eranames <- paste(rep(eralevels, length(fivep)),
                      rep(fivep, each = length(eralevels)),
                      sep = ".")
    bin_df <- cbind(bin_df, gall[eranames])
    
    # Add lag-one for each variable
    for(ii in 2:ncol(bin_df)){
      col_name <- paste0(names(bin_df)[ii], ".lag1")
      bin_df[[col_name]] <- dplyr::lag(bin_df[,ii], 1, 0)
    }
    
    # Geopotential model formula
    frm1 <- as.formula(paste0("Ix~",
                              capture.output(cat(eranames, sep = "+"))))
    
    # Geopotential model with lag variables formula
    lagnames <- names(bin_df)[grep("lag",names(bin_df))]
    frm2 <- as.formula(paste0("Ix~",
                              capture.output(cat(c(eranames,lagnames),
                                                 sep = "+"))))
    
    # Geopotential model with second order polynomial terms formula
    polynames <- sapply(eranames, function(name) paste0("poly(", name,",2)"))
    frm3 <- as.formula(paste0("Ix~",
                              capture.output(cat(polynames, sep = "+"))))
    
    # Geopotential model with second order polynomial and lag terms formula
    frm4 <- as.formula(paste0("Ix~",
                              capture.output(cat(c(polynames,lagnames),
                                                 sep = "+"))))
    
    # Compute GLMs
    fit1 <- glm(formula = frm1,
                data = bin_df[idx.train,],
                family = binomial(link = "logit"))
    fit2 <- glm(formula = frm2,
                data = bin_df[idx.train,],
                family = binomial(link = "logit"))
    fit3 <- glm(formula = frm3,
                data = bin_df[idx.train,],
                family = binomial(link = "logit"))
    fit4 <- glm(formula = frm4,
                data = bin_df[idx.train,],
                family = binomial(link = "logit"))
    
    # Compute a stepAIC to each of the models
    cat("\nRunning stepAIC")
    fit1_step <-stepAIC(object = fit1, direction = "both", trace = FALSE)
    fit2_step <- stepAIC(object = fit2, direction = "both", trace = FALSE)
    fit3_step <- stepAIC(object = fit3, direction = "both", trace = FALSE)
    fit4_step <-stepAIC(object = fit4, direction = "both", trace = FALSE)
    
    # List of fitted models
    fitted_models <- list(fit1_step,fit2_step,fit3_step,fit4_step)
    
    # Compute AIC for each model
    AIC_values <- sapply(fitted_models, AIC)
    
    # Identify the index of the model with the lowest AIC
    index_lowest_AIC <- which.min(AIC_values)
  
    # Save the fitted model with the lowest AIC
    best_model <- fitted_models[[index_lowest_AIC]]
  
    # Calculate the AUC value
    predict.test <- predict(best_model,
                            newdata = bin_df[-idx.train,],
                            type = "response")
    roc.aux <- roc(bin_df[-idx.train,]$Ix, predict.test, print.auc = TRUE)
    print(auc(roc.aux))
    
    # Save AUC values in data.frame
    AUC.df$AUC[ss] <- auc(roc.aux)
    
    # Save best model
    saveRDS(best_model, file = file.path(outdir,paste0(stations$STAID[ss],".rds")))

    # Save AUC matrix
    write.csv(x = AUC.df,
              file = file.path(dirname(outdir),"local.AUC.csv"),
              row.names = F)
    toc <- Sys.time()
    print(toc-tic)
    
  }# for ss in stations
  
}# if outdir exists


```
