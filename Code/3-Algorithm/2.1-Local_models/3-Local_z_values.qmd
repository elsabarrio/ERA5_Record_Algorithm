---
title: "3-Local_z_values"
format: html
editor: visual
---

## Obtaining the z values from the local models

This script retrieves the z values from the variables of each of the local models. This is useful because the global models will be based on the z values and on how frequent each of the variables are (how many of the local models they appear on).

## Define common variable names

We want to save all the models z values in a data frame and to do so we first need to define common variable names for all of them, specifically the variables closest to each of the station being considered, we want to remove their coordinates indicators and save them with a common name.

```{r message = FALSE, warning = FALSE}

# Define variable names
v.names <- c("g.300.","g.500.","g.700.", # Variables closest to each of the station being considered
             "g.300.45N.10W","g.500.45N.10W","g.700.45N.10W",
             "g.300.35N.10W","g.500.35N.10W","g.700.35N.10W",
             "g.300.45N.5E","g.500.45N.5E","g.700.45N.5E",
             "g.300.35N.5E","g.500.35N.5E","g.700.35N.5E")

# Now add lag variables for each of the geopotential variables
lag.names <- c()
for (i in 1:length(v.names)){
  lag.name <- paste0(v.names[i], ".lag1")
  lag.names <- c(lag.names,lag.name)
}

# Now add poly terms for each of the geopetential variables
poly.terms <- c()
for (i in 1:length(v.names)){
  poly1.term <- paste0("poly(",v.names[i], ", 2)1")
  poly2.term <- paste0("poly(",v.names[i], ", 2)2")
  poly.terms <- c(poly.terms,poly1.term,poly2.term)
}

# Create an array containing all the variable's names
final.variables <- c(v.names,lag.names,poly.terms)
```

## Saving z values

In the code cell below the z values of the variables of each of the local models are saved. These will be used to decide which variables to keep in the simplest global model.

```{r message = FALSE, warning = FALSE}

# Set working directory
wd <- "C:/Users/elsac/Documents/Excess.records"

# Set data directory
models.dir <- file.path(wd,"Results/local.models")
if(!dir.exists(models.dir)) stop("models.dir not found")

# Get the list of the file names of the models
models.list <- list.files(models.dir)

# Create matrix to save z values
z.mat <- matrix(ncol = length(final.variables), nrow = length(models.list))
colnames(z.mat) <- final.variables

# Initialize empty array and variable j
staid.rows <- c()
j <- 0

# Create a loop to iterate over the models and save their z values
for (model in models.list){
  
  j <- j+1
  
  # Get the station ID of the specific model
  staid <- gsub("\\.rds$", "", model)
  
  # Read the model
  fit.stat <- readRDS(file = file.path(models.dir,model))
  
  # Keep only the z values from the models
  z.value <- summary(fit.stat)$coefficients[,3]
  
  # Add rownames
  staid.rows <- c(staid.rows, staid)
  
  # Define further grid and get the variables from the further grid
  further.grid <- c("45N.10W", "45N.5E", "35N.10W", "35N.5E")
  far.idx <-grep("45N.10W|45N.5E|35N.10W|35N.5E", names(z.value))
  z.value.l <- z.value[c(far.idx)]
  
  # Get the variables closest to each of the stations
  z.value.s <- z.value[-c(1,far.idx)]
  # Get the names of the variables
  names.small.aux <- names(z.value[-c(1,far.idx)])
  
  # Regular expression pattern to match coordinates
  pattern <- "\\d+[A-Z]\\.\\d+[A-Z]"
  
  # Remove the coordinates from the variables closest to each of the station so that they all have the same name
  names.small <- gsub(pattern, "", names.small.aux)
  names(z.value.s) <- names.small
  
  # Get the final z values with the propper names
  fin.z <- c(z.value.s, z.value.l)
  
  # Match the names with the z matrix names
  matched.idx <- match(names(fin.z), colnames(z.mat))
  
  # Add the data to the z matrix
  z.mat[j, matched.idx] <- fin.z
  
}

# Set the rownames from the z matrix to the stations' IDs
rownames(z.mat) <- staid.rows

# Convert the matrix into a data frame
fin.z.mat <- as.data.frame(z.mat)

# Add a column with the station IDs
fin.z.mat$STAID <- staid.rows

# Save the data frame
save.dir <- paste0(wd,"/Results/local.z.values/")
if(!dir.exists(save.dir)) dir.create(save.dir, recursive = T)

if(!is.element("data.table", row.names(installed.packages()))) install.packages("data.table")
library(data.table)
fwrite(x = fin.z.mat, file = file.path(save.dir, "/z.values.df.csv" ))
```
