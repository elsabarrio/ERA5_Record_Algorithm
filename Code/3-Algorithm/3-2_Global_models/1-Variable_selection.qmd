---
title: "1-M1_variable_selection"
format: html
editor: visual
---

## Identifying the original terms and their corresponding polynomials

We start by reading the z values table we obtained from the 36 simple models in the previous script. We then obtain the original variables names.

```{r message = FALSE, warning = FALSE}

# Clear workspace
rm(list = ls())

# Find the directory with the z values
z_dir <- "../../../Results/local.z.values/"
if(!dir.exists(z_dir)) stop("z_dir not found")

# Read the z values
z.mat <- read.csv(file = file.path(z_dir, "zvalues_df.csv"),
                  check.names = F)

if(!is.element("dplyr", row.names(installed.packages()))) install.packages("dplyr")
library(dplyr)

# Identify columns
columns <- colnames(z.mat)

# Filter original columns
originals <- columns[!grepl("poly|lag|STAID", columns)]

# Filter polygonic columns ending with '2)1'
poly.2.1 <- grep("^poly.*2\\)1$", columns, value = TRUE)

```

## Sum original columns to first polynomial terms

Now we want to combine the columns of the original terms and the first order polynomial.

```{r}
# Add original columns to first polynomial term columns
for (original_col in originals) {
  # Find the equivalent first polynomial term column
  poly_col <- poly.2.1[grepl(paste0("\\(", original_col, ","), poly.2.1)]
  
  # Realizar la suma en valor absoluto
  z.mat[[poly_col]] <-  rowSums(cbind(abs(z.mat[[original_col]]),
                                      abs(z.mat[[poly_col]])),
                                na.rm = TRUE)
}

# Remove original columns from data frame
z.mat <- z.mat[, !colnames(z.mat) %in% originals]

```

## Find key variables

We want to keep variables that have an absolute z score of at least 2 in 12 stations (1/3 of all stations). These variables are the most influential ones across the 36 models and will be used to construct the global models.

```{r}
# Count how many absolute values are above 2 at each variable
counts <- apply(z.mat, 2, function(col) sum(abs(col) >= 2, na.rm = TRUE))

# Find variables that have an absolute z score of at least 2 in 12 stations 
final.var.aux <- names(which(counts>=12))

# Remove "STAID"
final.var.aux <- final.var.aux[final.var.aux != "STAID"]

# Remove ")2" for terms that end with that
final.var.aux <- sub("2$", "", final.var.aux)

# Filter polygonic columns ending with '2)1'
final.var.aux  <- sub("poly\\((.*), 2\\)1", "\\1", final.var.aux)

# Step 4: Remove the original term if there is a corresponding "poly" version
# Find the "poly" terms and check for their non-poly counterparts
poly.terms <- grep("^poly\\(", final.var.aux, value = TRUE)

# Loop over poly terms and remove the original term if it exists
for(term in poly.terms) {
  # Remove the "poly" prefix and check if the base term exists
  base_term <- sub("poly\\((.*), 2\\)", "\\1", term)
  final.var.aux <- final.var.aux[final.var.aux != base_term]
}
final.var.aux

```

We are left with 9 variables, to be included in the global models. We can now save this list of terms.

## Save final variables

```{r}

# Define the folder path
folder_path <- "../../../Results/final.models"

# Check if the folder exists, and create it if it does not
if(!dir.exists(folder_path)) dir.create(folder_path)

# Save the array to an RDS file
saveRDS(final.var.aux,file = paste0(folder_path,"/final_variables.rds"))

```
