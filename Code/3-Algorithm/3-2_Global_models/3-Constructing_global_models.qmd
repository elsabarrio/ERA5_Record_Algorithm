---
title: "3-Global_models"
format: html
editor: visual
---

## Load global data.frame and add lag1 variables

We begin by loading a global data.frame.

```{r}
# Clear workspace
rm(list = ls())

# Set data directory
data_dir <- "../../../Data"
if(!dir.exists(data_dir)) stop("data_dir not found")

# Load data.frame
global.df <- readRDS(file.path(data_dir,"global_data","global_df.rds"))

# Load feature selected variables based on z-values
outdir <- "../../../Results/final.models"
if(!dir.exists(outdir)) stop("outdir not found")
fin.var <- readRDS(file.path(outdir,"final_variables.rds"))

# Detect lag1 variables
lag1idx <- grep(".lag1", fin.var)
if(length(lag1idx)>0){
  
  # Load libraries
  if(!is.element("dplyr", row.names(installed.packages()))) install.packages("dplyr")
  library(dplyr)
  
  # Calculate lag1 variables
  for(ii in 1:length(lag1idx)){
    # Find variable
    varname <- unlist(strsplit(x = fin.var[lag1idx[ii]], split = ".lag1"))
    # Create lag1
    if(!is.element(varname, names(global.df))) stop("Lag1 variable not found in global data.frame")
    global.df[[fin.var[lag1idx[ii]]]] <- dplyr::lag(global.df[[varname]], 1, 0)
    
  }# for ii lag1 found
}# if any lag1 found

# Detect poly-2 variables
poly2idx <- grep("poly", fin.var)
fin.single <- fin.var
if(length(poly2idx)>0){
  for(ii in 1:length(poly2idx)){
    fin.single[poly2idx[ii]] <- gsub(", 2[)]","",gsub("poly[(]","",fin.single[poly2idx[ii]]))
  } 
}

# Check if all final local variables are included in the global data.frame
if(!all(fin.single %in% names(global.df))) stop("Variable name not found in global data.frame")

```

## M1: Simple global model

We begin by constructing a simple global model with the final variables selected from the local models as predictors.

```{r}

# Load libraries
if(!is.element("MASS", row.names(installed.packages()))) install.packages("MASS")
library(MASS)

# Define file path
model_file <- file.path(outdir, "m1.rds")
 
# Set training set
idx.train <- which(global.df$t <= 51)
   
# Check if file exists
if (!file.exists(model_file)) {
   # File does not exist; run the code to compute and save the model
   
   # Get formula
   frm.1 <- as.formula(paste0("Ix~", capture.output(cat(fin.var, sep = "+"))))
   
   # Fit model
   full.m1 <- glm(formula = frm.1,
                  data = global.df[idx.train,],
                  family = binomial(link = "logit"))
   
   # Apply a stringent stepAIC
   m1.0 <- update(full.m1, .~1)
   tic <- Sys.time()
   m1 <- stepAIC(object = m1.0,
                 direction = "both",
                 scope = list(lower = m1.0, upper = full.m1),
                 k = 10.82757)
   toc <- Sys.time()
   cat("M1: ")
   print(toc-tic)
   
   # If any poly-2 term-2 is not significant remove it
   m1.frm <- as.character(m1$formula)
   m1.coefs <- summary(m1)$coefficients
   fin.var.m1 <- fin.var
   # Detect poly-2 variables
   poly2idx <- grep(", 2[)]2", rownames(m1.coefs))
   if(length(poly2idx)>0){
     
     # Find any with abs z-value < 2
     poly2z <- which(abs(m1.coefs[poly2idx,3])<2)
     if(length(poly2z)>0){
       
       # If any below 2 then remove it
       for(ii in 1:length(poly2z)){
         # Substitute in formula
         varname <- rownames(m1.coefs)[poly2idx[poly2z[ii]]]
         varname <- gsub(", 2[)]2","",gsub("poly[(]","",varname))
         m1.frm[3] <- gsub(pattern = paste0("poly[(]",varname,", 2[)]"),
                           replacement = varname,
                           x = m1.frm[3])
         # Substitute in final variables
         fin.var.m1[grep(paste0("poly[(]",varname,", 2[)]"),fin.var.m1)] <- varname
         
       }# for any poly term-2 z-value < 2
     }# if poly term-2 z-value < 2
   }# if poly2 term-2 > 0
   
   # Re-formulate
   m1.frm <- as.formula(paste(m1.frm[c(2,1,3)], collapse = " "))
   m1.new <- glm(formula = m1.frm,
                 data = global.df[idx.train,],
                 family = binomial(link = "logit"))
   print(AIC(m1.new,m1))
   m1 <- m1.new

   # Save model
   saveRDS(m1.new$formula, file = model_file)
   rm(full.m1, m1.new)
   saveRDS(object = fin.var.m1, file = file.path(outdir,"final_variables_m1.rds"))
}

```

## M2: M1 \* (LAT+LON)

Constructing a global model with interaction of the final variables selected from the only geopotential variables (M1) with the interaction of latitude plus longitude.

```{r}
model_file <- file.path(outdir, "m2.rds")

# Check if file exists
if(!file.exists(model_file)) {
  
  # File does not exist; run the code to compute and save the model
  fin.var.m1 <- readRDS(file.path(outdir,"final_variables_m1.rds"))
  # Get formula
  frm.2 <- as.formula(paste0("Ix~ (",capture.output(cat(fin.var.m1, sep = "+")),") * (LAT + LON) "))
  
  # Define model before step
  full.m2 <- glm(formula = frm.2,
                 data = global.df[idx.train,],
                 family = binomial(link = "logit"))
  
  # Set model for lower scope
  m2.0 <- update(full.m2, .~1)
  
  # Run step
  tic <- Sys.time()
  m2 <- stepAIC(object = m2.0,
                direction = "both",
                scope = list(lower = m2.0, upper = full.m2),
                k = 10.82757)
  toc <- Sys.time()
  cat("M2: ")
  print(toc-tic)
  # Time difference of 1.167066 hours
  
  # Save model 
  m2.frm <- m2$formula
  saveRDS(m2$formula, file = model_file)
  
  }

```

## M3: M1 \* (avg.Tx + sd.Tx)

Constructing a global model with interaction of the final variables selected from the only geopotential variables (M1) with the interaction of average and SD of Tx for the reference period (1981-2010).

```{r}
# Define file path
model_file <- file.path(outdir, "m3.rds")

# Check if file exists
if (!file.exists(model_file)) {
  
  # File does not exist; run the code to compute and save the model
  fin.var.m1 <- readRDS(file.path(outdir,"final_variables_m1.rds"))
  # Get formula
  frm.3 <- as.formula(paste0("Ix~ (",capture.output(cat(fin.var.m1, sep = "+")),") * (avg.Tx + sd.Tx) "))
  
  # Define model before step
  full.m3 <- glm(formula = frm.3,
                 data = global.df[idx.train,],
                 family = binomial(link = "logit"))
  
  # Set model for lower scope
  m3.0 <- update(full.m3, .~1)
  
  # Run step
  tic <- Sys.time()
  m3 <- stepAIC(object = m3.0,
                direction = "both",
                scope = list(lower = m3.0,
                             upper = full.m3),
                k = 10.82757)
  toc <- Sys.time()
  cat("M3: ")
  print(toc-tic)
  # Time difference of 34.34422 mins
  
  # Save model 
  m3.frm <- m3$formula
  saveRDS(m3$formula, file = model_file)

} 

```

## M4: M1 \* (altitude + log(coast distance))

Constructing a global model with interaction of the final variables selected from the only geopotential variables (M1) with the interaction of altitude and the natural logarithm of distance to the coast.

```{r}
# Define file path
model_file <- file.path(outdir, "m4.rds")

# Check if file exists
if(!file.exists(model_file)) {
  
  # File does not exist; run the code to compute and save the model
  fin.var.m1 <- readRDS(file.path(outdir,"final_variables_m1.rds"))
  # Get formula
  frm.4 <- as.formula(paste0("Ix~ (",capture.output(cat(fin.var.m1, sep = "+")),") * (Altitude + log(CoastDist)) "))
  
  # Define model before step
  full.m4 <- glm(formula = frm.4,
                 data = global.df[idx.train,],
                 family = binomial(link = "logit"))
  
  # Set model for lower scope
  m4.0 <- update(full.m4, .~1)
  
  # Run step
  tic <- Sys.time()
  m4 <- stepAIC(object = m4.0,
                direction = "both",
                scope = list(lower = m4.0, upper = full.m4),
                k = 10.82757)
  toc <- Sys.time()
  cat("M4: ")
  print(toc-tic)
  # Time difference of 19.94456 mins
  
  # Save model 
  m4.frm <- m4$formula
  saveRDS(m4$formula, file = model_file)

}

```

## M5: M1 \* geodesic \* climatic \* geographic

Constructing a global model with interaction of the final variables selected from the only geopotential variables (M1) with the interaction of geodesic (latitude and longitude), climatic (average and SD Tx), and geographical (altitude and log(CoastDist)) variables.

```{r}
# Define file path
model_file <- file.path(outdir, "m5.rds")

# Check if file exists
if(!file.exists(model_file)) {
  
  # File does not exist; run the code to compute and save the model
  fin.var.m1 <- readRDS(file.path(outdir,"final_variables_m1.rds"))
  # Get formula
  frm.5 <- as.formula(paste0("Ix~ (",capture.output(cat(fin.var.m1, sep = "+")),") * (LAT + LON) * (avg.Tx + sd.Tx) * (Altitude + log(CoastDist)) "))
  
  # Define model before step
  full.m5 <- glm(formula = frm.5,
                 data = global.df[idx.train,],
                 family = binomial(link = "logit"))
  
  # Set model for lower scope
  m5.0 <- update(full.m5, .~1)
  
  # Run step
  tic <- Sys.time()
  m5 <- stepAIC(object = m5.0,
                direction = "both",
                scope = list(lower = m5.0, upper = full.m5),
                k = 10.82757)
  toc <- Sys.time()
  cat("M5: ")
  print(toc-tic)
  # Time difference of 1.099813 hours
  
  # Save model 
  m5.frm <- m5$formula
  saveRDS(m5$formula, file = model_file)

}

```
