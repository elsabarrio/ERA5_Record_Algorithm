---
title: "3-Local_z_values"
format: html
editor: visual
---

## Obtaining the z-values from the local models

This script retrieves the z-values from the variables of each of the local models. This is useful because the global models will be based on the z-values and on how frequent each of the variables are (how many of the local models they appear on).

## Define common variable names

We want to save all the models z-values in a data frame and to do so we first need to define common variable names for all of them, specifically the variables closest to each of the station being considered, we want to remove their coordinates indicators and save them with a common name.

```{r message = FALSE, warning = FALSE}

# Clear workspace
rm(list = ls())

# Define variable names
v.names <- c("g300.","g500.","g700.", # Variables closest to each of the station being considered
             "g300.45N.10W","g500.45N.10W","g700.45N.10W",
             "g300.35N.10W","g500.35N.10W","g700.35N.10W",
             "g300.45N.5E","g500.45N.5E","g700.45N.5E",
             "g300.35N.5E","g500.35N.5E","g700.35N.5E")

# Now add lag variables for each of the geopotential variables
lag.names <- paste0(v.names,".lag1")

# Now add poly terms for each of the geopetential variables
poly.terms <- paste0(rep(paste0(paste0("poly(",v.names),", 2)"),each=2),
                     c("1","2"))
# Create an array containing all the variable's names
final.variables <- c(v.names,lag.names,poly.terms)
```

## Saving z-values

In the code cell below the z-values of the variables of each of the local models are saved. These will be used to decide which variables to keep in the simplest global model.

```{r message = FALSE, warning = FALSE}

# Set data directory
data_dir <- "../../../Data"
if(!dir.exists(data_dir)) stop("data_dir not found")

# Read list of observatories of interest. Based on previous work.
stations <- read.csv(file.path(data_dir,"geo_peninsula_zones.csv"))
idx <- which(!is.na(stations$Zona))
stations <- stations[idx,]

# Set data directory
models.dir <- "../../../Results/local_models"
if(!dir.exists(models.dir)) stop("models.dir not found")

# Get the list of the file names of the models
models.list <- list.files(models.dir)
if(nrow(stations) != length(models.list)){
  stop("Number of models and stations differ.")
}

# Create matrix to save z-values
z.mat <- matrix(ncol = length(final.variables), nrow = length(models.list))
colnames(z.mat) <- final.variables
rownames(z.mat) <- stations$STAID

# Create a loop to iterate over the models and save their z values
for(ss in 1:nrow(stations)){
  
  print(paste0("Station: ",ss,"/",nrow(stations)))
  
  # Read the model
  fit.stat <- readRDS(file = paste0(models.dir,"/",stations$STAID[ss],".rds"))
  
  # Keep only the z values from the models
  z.value <- summary(fit.stat)$coefficients[,3]
  z.names <- names(z.value)
  
  # Define further grid and get the variables from the further grid
  far.idx <- grep("45N.10W|45N.5E|35N.10W|35N.5E", z.names)
  # Get the variables closest to each of the stations
  z.names[-c(1,far.idx)] <- gsub(pattern = "\\d+[A-Z]\\.\\d+[A-Z]",
                                        replacement =  "",
                                        x = z.names[-c(1,far.idx)])
  
  # Match the names with the z matrix names
  matched.idx <- match(z.names[-1], colnames(z.mat))
  
  # Add the data to the z matrix
  z.mat[ss, matched.idx] <- z.value[-1]
  
}

# Convert the matrix into a data frame
fin.z.mat <- as.data.frame(z.mat)
fin.z.mat <- cbind(row.names(z.mat),fin.z.mat)
names(fin.z.mat)[1] <- "STAID"

# Save the data frame
save.dir <- "../../../Results/local_zvalues/"
if(!dir.exists(save.dir)) dir.create(save.dir, recursive = T)
write.csv(x = fin.z.mat,
          file = file.path(save.dir, "zvalues_df.csv" ),
          row.names = F)

```
