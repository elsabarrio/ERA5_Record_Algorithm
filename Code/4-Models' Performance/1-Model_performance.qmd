---
title: "3-Global_models"
format: html
editor: visual
---

## Load global data.frame and add lag1 variables

We begin by loading a global data.frame.

```{r}
# Clear workspace
rm(list = ls())

# Set data directory
data_dir <- "../../Data"
if(!dir.exists(data_dir)) stop("data_dir not found")

# Load data.frame
global.df <- readRDS(file.path(data_dir,"global_data","global_df.rds"))

# Load feature selected variables based on z-values
outdir <- "../../Results/final.models"
if(!dir.exists(outdir)) stop("outdir not found")
fin.var <- readRDS(file.path(outdir,"final_variables.rds"))

# Detect lag1 variables
lag1idx <- grep(".lag1", fin.var)
if(length(lag1idx)>0){
  
  # Load libraries
  if(!is.element("dplyr", row.names(installed.packages()))) install.packages("dplyr")
  library(dplyr)
  
  # Calculate lag1 variables
  for(ii in 1:length(lag1idx)){
    # Find variable
    varname <- unlist(strsplit(x = fin.var[lag1idx[ii]], split = ".lag1"))
    # Create lag1
    if(!is.element(varname, names(global.df))) stop("Lag1 variable not found in global data.frame")
    global.df[[fin.var[lag1idx[ii]]]] <- dplyr::lag(global.df[[varname]], 1, 0)
    
  }# for ii lag1 found
}# if any lag1 found

# Detect poly-2 variables
poly2idx <- grep("poly", fin.var)
fin.single <- fin.var
if(length(poly2idx)>0){
  for(ii in 1:length(poly2idx)){
    fin.single[poly2idx[ii]] <- gsub(", 2[)]","",gsub("poly[(]","",fin.single[poly2idx[ii]]))
  } 
}

# Check if all final local variables are included in the global data.frame
if(!all(fin.single %in% names(global.df))) stop("Variable name not found in global data.frame")

```

## Load global models

Loading global models.

```{r}

# Set training set
idx.train <- which(global.df$t <= 51)

# M1: Simple global model
# Define file path
model_file <- file.path(outdir, "m1.rds")
# Check if file exists
if(!file.exists(model_file)) stop("Model M1 not found!")
# File exists; read the formula
m1.frm <- readRDS(model_file)
# Compute the model
m1 <- glm(formula = m1.frm,
          data = global.df[idx.train,],
          family = binomial(link = "logit"))

# M2: M1 * (LAT+LON)
# Define file path
model_file <- file.path(outdir, "m2.rds")
# Check if file exists
if(!file.exists(model_file)) stop("Model M2 not found!")
# File exists; read the formula
m2.frm <- readRDS(model_file)
# Compute the model
m2 <- glm(formula = m2.frm,
          data = global.df[idx.train,],
          family = binomial(link = "logit"))

# M3: M1 * (avg.Tx + sd.Tx)
# Define file path
model_file <- file.path(outdir, "m3.rds")
# Check if file exists
if(!file.exists(model_file)) stop("Model M3 not found!")
# File exists; read the formula
m3.frm <- readRDS(model_file)
# Compute the model
m3 <- glm(formula = m3.frm,
          data = global.df[idx.train,],
          family = binomial(link = "logit"))

# M4: M1 * (Altitude + log(CoastDist))
# Define file path
model_file <- file.path(outdir, "m4.rds")
# Check if file exists
if(!file.exists(model_file)) stop("Model M4 not found!")
# File exists; read the formula
m4.frm <- readRDS(model_file)
# Compute the model
m4 <- glm(formula = m4.frm,
          data = global.df[idx.train,],
          family = binomial(link = "logit"))

# M5: Triple interaction model
# Define file path
model_file <- file.path(outdir, "m5.rds")
# Check if file exists
if(!file.exists(model_file)) stop("Model M5 not found!")
# File exists; read the formula
m5.frm <- readRDS(model_file)
# Compute the model
m5 <- glm(formula = m5.frm,
          data = global.df[idx.train,],
          family = binomial(link = "logit"))
   
# Models list
mls <- gsub("[.]frm", "", ls()[grep("[.]frm",ls())])

```

## Model's AUCs

```{r}
if(!is.element("pROC", row.names(installed.packages()))) install.packages("pROC")
library(pROC)

# Create output directory
auc_dir <- file.path(outdir,"AUC")
if(!dir.exists(auc_dir)) dir.create(auc_dir)

# Read list of observatories of interest. Based on previous work.
stations <- read.csv(file.path(data_dir,"geo_peninsula_zones.csv"))
idx <- which(!is.na(stations$Zona))
stations <- stations[idx,]
# Abbreviations
stations$STANAME[10] <- "FABRA OBSERVATORY                       "
stations$STANAME[25] <- "BCN/AEROPUERTO                          "
stations$abb <- substr(stations$STANAME,1,6)
  
# Global data.frame to store model performance
all_df <- data.frame(Model = mls,
                     k = vector("numeric", length(mls)),
                     AUC = vector("numeric", length(mls)),
                     AUC.coast = vector("numeric", length(mls)),
                     AUC.inner = vector("numeric", length(mls)),
                     AIC = vector("numeric", length(mls)))

# For each model check performance
for(mm in 1:length(mls)){
  
  print(paste0("Model: ",mls[mm]))
  
  # Create data.frame to store results
  staid_df <- data.frame(STAID = stations$STAID,
                         Name = stations$abb,
                         CoastDist = round(stations$CoastDist/1000,1),
                         Model = rep(mls[mm], nrow(stations)),
                         k = vector("numeric", nrow(stations)),
                         AUC = vector("numeric", nrow(stations)))
  
  # Get number of parameters
  all_df$k[mm] <- staid_df$k <- length(coef(get(mls[mm])))
  
  # Get global AUC
  predict.aux <- predict(object = get(mls[mm]),
                         newdata = global.df[-idx.train,],
                         type = "response")
  roc.aux <- roc(global.df$Ix[-idx.train], predict.aux, print.auc = TRUE)
  all_df$AUC[mm] <- auc(roc.aux)
  
  # Get AUC from stations near the coast
  idx.test.coast <- which(global.df$CoastDist[-idx.train]/1000 < 50)
  roc.coast <- roc(response = (global.df$Ix[-idx.train])[idx.test.coast],
                   predictor = predict.aux[idx.test.coast],
                   print.auc = TRUE)
  all_df$AUC.coast[mm] <- auc(roc.coast)
  
  # Get AUC from inner stations
  roc.inner <- roc(response = (global.df$Ix[-idx.train])[-idx.test.coast],
                   predictor = predict.aux[-idx.test.coast],
                   print.auc = TRUE)
  all_df$AUC.inner[mm] <- auc(roc.inner)
  
  # Get AIC value
  all_df$AIC[mm] <- AIC(get(mls[mm]))
  
  # Get AUC values at each station
  for(ss in 1:nrow(staid_df)){
    
    # Get indices
    idx.test.staid <- which(global.df$STAID[-idx.train] == staid_df$STAID[ss])
    
    # Calculate AUC
    roc.staid <- roc(response = (global.df$Ix[-idx.train])[idx.test.staid],
                     predictor = predict.aux[idx.test.staid],
                     print.auc = TRUE)
    staid_df$AUC[ss] <- auc(roc.staid)
    
  }# for ss stations
  
  # Save results
  outname <- paste0("auc_staid_",mls[mm],".csv")
  write.csv(x = staid_df, 
            file = file.path(auc_dir,outname),
            row.names = F)
  
}# for mm model

# Save global results
outname <- paste0("auc_global.csv")
write.csv(x = all_df, 
          file = file.path(auc_dir,outname),
          row.names = F)
```
